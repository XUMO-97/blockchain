1.什么是合约？
在区块链上运行的程序，通常称为智能合约（Smart Contract）📒。所以通常会把写区块链程序改称写智能合约。
简单点来讲，合约就是运行在区块链上的一段程序。
2.一个完整的合约

pragma solidity ^0.4.4; //声明solidity版本

contract Counter {   // 声明一个counter合约，contract是声明合约的关键字，counter是合约名自己起
 
    uint count = 0;  //count和owner是状态变量
    address owner;

    function Counter() {   //function counter函数名与合约名相同，此函数为合约的构造函数，随着版本更新，更建议使用constructor(){}
       owner = msg.sender;
    } 
    function increment() public {  //成员函数，即方法、行为，increment会让状态函数count增加step
       uint step = 10;	           //increment中声明的step是局部变量，局部变量只在离它最近的{}中使用
       if (owner == msg.sender) {
          count = count + step;
       }
    }
 
    function getCount() constant returns (uint) { 调用getcount时会得到count的值
       return count;
    }

    function kill() {  //析构函数，与构造函数对应，用于销毁数据，调用kill函数时，就会调用selfdestruct(owner)销毁当前合约
       if (owner == msg.sender) { 
          selfdestruct(owner);
       }
    }
}
部署合约时，因为要往区块链写入数据，需要矿工进行验证，所以需要花费一些gas奖励给矿工，还有当我们每次调用increment方法时，也属于写入数据，同样需要花费gas，但是调用getCount方法时只是从区块链读取数据，无需验证，读取数据无须花费gas。

